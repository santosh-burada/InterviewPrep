apiVersion: v1
kind: ServiceAccount
metadata:
  name: application-service-account
  namespace: application
---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: compiler
  name: compiler-role
rules:
  - apiGroups: [""]
    resources: ["pods", "services", "configmaps", "secrets", "persistentvolumeclaims"]
    verbs: ["*"]
  - apiGroups: ["apps"]
    resources: ["deployments", "statefulsets", "daemonsets", "replicasets"]
    verbs: ["*"]
  - apiGroups: ["batch"]
    resources: ["jobs"]
    verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: compiler-role-binding
  namespace: compiler
subjects:
  - kind: ServiceAccount
    name: application-service-account
    namespace: application
roleRef:
  kind: Role
  name: compiler-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  namespace: application
spec:
  serviceName: "mongodb"
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:5.0
        ports:
        - containerPort: 27017
        volumeMounts:
        - name: mongo-persistent-storage
          mountPath: /data/db
  volumeClaimTemplates:
  - metadata:
      name: mongo-persistent-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 5Gi
---

apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: application
spec:
  ports:
  - port: 27017
    targetPort: 27017
  clusterIP: None
  selector:
    app: mongodb
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: application
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      serviceAccountName: application-service-account
      containers:
      - name: backend
        image: santoshburada/backend:v1.0
        env:
        - name: MONGO_URI
          value: "mongodb://mongodb.application.svc.cluster.local:27017"
        - name: access_key
          valueFrom:
            secretKeyRef:
              name: aws-credentials
              key: access_key
        - name: secret_key
          valueFrom:
            secretKeyRef:
              name: aws-credentials
              key: secret_key
---

apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: application
spec:
  type: NodePort
  selector:
    app: backend
  ports:
    - port: 7000       # The port exposed by your backend application
      targetPort: 7000  # The port your backend container listens on
      nodePort: 30001   # Port exposed on the host machine

---
# create a secret for the application namespace and compiler namespace with the same name aws-credentials and the same keys access_key and secret_key.
# create an Iam user in AWS and attach the policy AmazonS3FullAccess to the user. create access key and secret key for the user. 
# apiVersion: v1
# kind: Secret
# metadata:
#   name: aws-credentials
#   namespace: application  
# type: Opaque
# stringData:
#   access_key: <value>
#   secret_key: <value>
# ---
# apiVersion: v1
# kind: Secret
# metadata:
#   name: aws-credentials
#   namespace: compiler  
# type: Opaque
# stringData:
#   access_key: <value>
#   secret_key: /<value>
